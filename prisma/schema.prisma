generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin model
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Admin actions
  createdPartners    Partner[]
  processedLeads     Lead[]
  approvedMilestones Milestone[]
  managedProjects    Project[]
  supportTickets     SupportTicket[]
  expenses           Expense[]
  systemSettings     SystemSetting[]

  @@map("admins")
}

// Partner model
model Partner {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String?
  name             String
  skillSet         String[]
  industryExp      String[]
  country          String?
  region           String?
  profilePhoto     String?
  hourlyRate       Decimal?
  portfolioLink    String?
  isActive         Boolean  @default(true)
  rating           Decimal? @default(0)
  totalEarnings    Decimal  @default(0)
  availableBalance Decimal  @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  createdBy        Admin           @relation(fields: [createdById], references: [id])
  createdById      String
  assignedProjects Project[]
  milestones       Milestone[]
  withdrawals      Withdrawal[]
  supportTickets   SupportTicket[]
  Lead             Lead[]

  @@map("partners")
}

// Client model
model Client {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  name        String
  companyName String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  leads          Lead[]
  projects       Project[]
  payments       Payment[]
  supportTickets SupportTicket[]
  invoices       Invoice[]

  @@map("clients")
}

// Lead model (from quote submissions)
model Lead {
  id              String     @id @default(cuid())
  name            String
  email           String
  companyName     String?
  projectCategory String
  description     String
  budgetRange     String
  status          LeadStatus @default(PENDING)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  client          Client?  @relation(fields: [clientId], references: [id])
  clientId        String?
  assignedPartner Partner? @relation(fields: [partnerId], references: [id])
  partnerId       String?
  processedBy     Admin?   @relation(fields: [adminId], references: [id])
  adminId         String?
  project         Project? // One-to-one when lead converts to project

  @@map("leads")
}

// Project model
model Project {
  id              String        @id @default(cuid())
  title           String
  description     String
  category        String
  status          ProjectStatus @default(PENDING)
  totalCost       Decimal
  partnerCost     Decimal
  adminMargin     Decimal
  gstAmount       Decimal       @default(0)
  gstEnabled      Boolean       @default(false)
  timeline        Int // in days
  startDate       DateTime?
  endDate         DateTime?
  completedAt     DateTime?
  maintenanceMode Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  client         Client          @relation(fields: [clientId], references: [id])
  clientId       String
  partner        Partner         @relation(fields: [partnerId], references: [id])
  partnerId      String
  managedBy      Admin           @relation(fields: [adminId], references: [id])
  adminId        String
  lead           Lead?           @relation(fields: [leadId], references: [id])
  leadId         String?         @unique
  milestones     Milestone[]
  payments       Payment[]
  supportTickets SupportTicket[]
  invoices       Invoice[]

  @@map("projects")
}

// Milestone model
model Milestone {
  id          String          @id @default(cuid())
  title       String
  description String?
  cost        Decimal
  duration    Int // in days
  status      MilestoneStatus @default(PENDING)
  order       Int // sequence order
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  project    Project   @relation(fields: [projectId], references: [id])
  projectId  String
  partner    Partner   @relation(fields: [partnerId], references: [id])
  partnerId  String
  approvedBy Admin?    @relation(fields: [adminId], references: [id])
  adminId    String?
  payments   Payment[]
  invoices   Invoice[]

  @@map("milestones")
}

// Payment model
model Payment {
  id          String        @id @default(cuid())
  amount      Decimal
  gstAmount   Decimal       @default(0)
  totalAmount Decimal
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  stripeId    String?
  paypalId    String?
  paidAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  client      Client     @relation(fields: [clientId], references: [id])
  clientId    String
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  milestoneId String?
  invoice     Invoice?   @relation(fields: [invoiceId], references: [id])
  invoiceId   String?

  @@map("payments")
}

// Invoice model
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  amount        Decimal
  gstAmount     Decimal       @default(0)
  totalAmount   Decimal
  gstEnabled    Boolean       @default(false)
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  client      Client     @relation(fields: [clientId], references: [id])
  clientId    String
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  milestoneId String?
  payments    Payment[]

  @@map("invoices")
}

// Withdrawal model for partners
model Withdrawal {
  id          String           @id @default(cuid())
  amount      Decimal
  status      WithdrawalStatus @default(PENDING)
  requestedAt DateTime         @default(now())
  processedAt DateTime?
  note        String?

  // Relations
  partner   Partner @relation(fields: [partnerId], references: [id])
  partnerId String

  @@map("withdrawals")
}

// Support Ticket model
model SupportTicket {
  id        String          @id @default(cuid())
  subject   String
  message   String
  status    SupportStatus   @default(OPEN)
  priority  SupportPriority @default(MEDIUM)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  client     Client            @relation(fields: [clientId], references: [id])
  clientId   String
  project    Project?          @relation(fields: [projectId], references: [id])
  projectId  String?
  assignedTo Partner?          @relation(fields: [partnerId], references: [id])
  partnerId  String?
  reviewedBy Admin?            @relation(fields: [adminId], references: [id])
  adminId    String?
  responses  SupportResponse[]

  @@map("support_tickets")
}

// Support Response model
model SupportResponse {
  id        String   @id @default(cuid())
  message   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  ticket   SupportTicket @relation(fields: [ticketId], references: [id])
  ticketId String

  @@map("support_responses")
}

// Expense model for admin
model Expense {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Decimal
  category    String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String

  @@map("expenses")
}

// Website Content model
model WebsiteContent {
  id        String   @id @default(cuid())
  page      String // home, about, contact, etc.
  section   String // hero, features, testimonials, etc.
  content   Json // flexible content blocks
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([page, section])
  @@map("website_contents")
}

// Dynamic Pages model
model DynamicPage {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   Json // content blocks
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dynamic_pages")
}

// Contact Submissions model
model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  isReplied Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

// System Settings model
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String // text, boolean, number, json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admin   Admin  @relation(fields: [adminId], references: [id])
  adminId String

  @@map("system_settings")
}

// Enums
enum LeadStatus {
  PENDING
  ASSIGNED
  QUOTED
  ACCEPTED
  REJECTED
  CONVERTED
}

enum ProjectStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum MilestoneStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  PAID
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
