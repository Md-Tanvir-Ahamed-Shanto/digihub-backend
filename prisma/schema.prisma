generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String          @id @default(cuid())
  email              String          @unique
  password           String
  name               String
  image              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  createdPartners    Partner[]
  processedLeads     Lead[]          @relation("AdminProcessedLeads")
  approvedMilestones Milestone[]
  managedProjects    Project[]       @relation(name: "AdminCreatedProjects")
  supportTickets     SupportTicket[]
  expenses           Expense[]
  systemSettings     SystemSetting[]

  @@map("admins")
}

model Partner {
  id                  String          @id @default(cuid())
  email               String          @unique
  password            String?
  name                String
  skillSet            String[]
  industryExp         String[]
  country             String?
  region              String?
  profilePhoto        String?
  hourlyRate          Decimal?
  portfolioLink       String?
  isActive            Boolean         @default(false)
  rating              Decimal?        @default(0)
  totalEarnings       Decimal         @default(0)
  availableBalance    Decimal         @default(0)
  verificationToken   String?         @unique
  verificationExpires DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  createdBy           Admin           @relation(fields: [createdById], references: [id])
  createdById         String
  assignedProjects    Project[]       @relation(name: "AssignedProjects")
  milestones          Milestone[]
  withdrawals         Withdrawal[]
  supportTickets      SupportTicket[]
  assignedLeads       Lead[]          @relation(name: "AssignedLeads")

  @@map("partners")
}

model Client {
  id                       String                    @id @default(cuid())
  name                     String
  email                    String                    @unique
  password                 String?
  phone                    String?
  companyName              String?
  isActive                 Boolean                   @default(false)
  isEmailVerified          Boolean                   @default(false)
  verificationToken        String?                   @unique
  verificationExpires      DateTime?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  leads                    Lead[]
  projects                 Project[]
  payments                 Payment[]
  supportTickets           SupportTicket[]
  invoices                 Invoice[]
  maintenanceSubscriptions MaintenanceSubscription[]

  @@map("clients")
}

model Lead {
  id              String     @id @default(cuid())
  name            String
  email           String
  phone           String
  companyName     String?
  projectCategory String
  porjectTitle    String
  description     String
  keyFeatures     String[]
  budgetRange     String
  timeline        String?
  status          LeadStatus @default(PENDING)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relationships
  clientId          String?
  client            Client?  @relation(fields: [clientId], references: [id])
  assignedPartnerId String?
  assignedPartner   Partner? @relation(name: "AssignedLeads", fields: [assignedPartnerId], references: [id])
  processedById     String?
  processedBy       Admin?   @relation(name: "AdminProcessedLeads", fields: [processedById], references: [id])
  projectId         String?  @unique // This field is the foreign key in Lead
  project           Project? @relation("LeadToProject", fields: [projectId], references: [id]) // <--- Kept definition here, renamed relation

  // New fields for offer details on the Lead
  offerPrice  Decimal?
  partnerCost Decimal?
  adminMargin Decimal?
  includesGST Boolean? @default(false)
  notes       String?

  @@map("leads")
}

model Project {
  id                       String                    @id @default(cuid())
  title                    String
  description              String?
  projectCategory          String?
  budget                   String?
  timeline                 String?
  status                   ProjectStatus             @default(PENDING_CLIENT_ACCEPTANCE)
  offerPrice               Decimal
  partnerCost              Decimal
  adminMargin              Decimal
  includesGST              Boolean                   @default(false)
  acceptedAt               DateTime?
  rejectedAt               DateTime?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  clientId                 String
  client                   Client                    @relation(fields: [clientId], references: [id])
  partnerId                String
  partner                  Partner                   @relation(name: "AssignedProjects", fields: [partnerId], references: [id])
  leadId                   String?                   @unique // This field is the foreign key in Project
  lead                     Lead?                     @relation("LeadToProject") // <--- Removed fields/references here, added relation name
  createdByAdminId         String?
  createdByAdmin           Admin?                    @relation(name: "AdminCreatedProjects", fields: [createdByAdminId], references: [id])
  milestones               Milestone[]
  payments                 Payment[]
  maintenanceSubscriptions MaintenanceSubscription[]
  invoices                 Invoice[]
  supportTickets           SupportTicket[]

  @@map("projects")
}

model Milestone {
  id          String          @id @default(cuid())
  title       String
  description String?
  cost        Decimal
  duration    Int
  status      MilestoneStatus @default(PENDING)
  order       Int
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  project     Project         @relation(fields: [projectId], references: [id])
  projectId   String
  partner     Partner         @relation(fields: [partnerId], references: [id])
  partnerId   String
  approvedBy  Admin?          @relation(fields: [adminId], references: [id])
  adminId     String?
  payments    Payment[]
  invoices    Invoice[]

  @@map("milestones")
}

model Payment {
  id                        String                   @id @default(cuid())
  amount                    Decimal
  gstAmount                 Decimal                  @default(0)
  totalAmount               Decimal
  method                    PaymentMethod
  status                    PaymentStatus            @default(PENDING)
  stripeId                  String?
  paypalId                  String?
  paidAt                    DateTime?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  client                    Client                   @relation(fields: [clientId], references: [id])
  clientId                  String
  project                   Project                  @relation(fields: [projectId], references: [id])
  projectId                 String
  milestone                 Milestone?               @relation(fields: [milestoneId], references: [id])
  milestoneId               String?
  invoice                   Invoice?                 @relation(fields: [invoiceId], references: [id])
  invoiceId                 String?
  maintenanceSubscription   MaintenanceSubscription? @relation(fields: [maintenanceSubscriptionId], references: [id])
  maintenanceSubscriptionId String?

  @@map("payments")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  amount        Decimal
  gstAmount     Decimal       @default(0)
  totalAmount   Decimal
  gstEnabled    Boolean       @default(false)
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  client        Client        @relation(fields: [clientId], references: [id])
  clientId      String
  project       Project       @relation(fields: [projectId], references: [id])
  projectId     String
  milestone     Milestone?    @relation(fields: [milestoneId], references: [id])
  milestoneId   String?
  payments      Payment[]

  @@map("invoices")
}

model Withdrawal {
  id          String           @id @default(cuid())
  amount      Decimal
  status      WithdrawalStatus @default(PENDING)
  requestedAt DateTime         @default(now())
  processedAt DateTime?
  note        String?
  partner     Partner          @relation(fields: [partnerId], references: [id])
  partnerId   String

  @@map("withdrawals")
}

model SupportTicket {
  id         String            @id @default(cuid())
  subject    String
  message    String
  status     SupportStatus     @default(OPEN)
  priority   SupportPriority   @default(MEDIUM)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  client     Client            @relation(fields: [clientId], references: [id])
  clientId   String
  project    Project?          @relation(fields: [projectId], references: [id])
  projectId  String?
  assignedTo Partner?          @relation(fields: [partnerId], references: [id])
  partnerId  String?
  reviewedBy Admin?            @relation(fields: [adminId], references: [id])
  adminId    String?
  responses  SupportResponse[]

  @@map("support_tickets")
}

model SupportResponse {
  id        String        @id @default(cuid())
  message   String
  isAdmin   Boolean       @default(false)
  createdAt DateTime      @default(now())
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  ticketId  String

  @@map("support_responses")
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Decimal
  category    String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  admin       Admin    @relation(fields: [adminId], references: [id])
  adminId     String

  @@map("expenses")
}

model MaintenancePlan {
  id            String                    @id @default(cuid())
  name          String                    @unique
  description   String?
  price         Decimal                   @db.Decimal(10, 2)
  billingCycle  BillingCycle
  features      String[]
  isActive      Boolean                   @default(true)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  subscriptions MaintenanceSubscription[]

  @@map("maintenance_plans")
}

model MaintenanceSubscription {
  id               String             @id @default(cuid())
  clientId         String
  planId           String
  status           SubscriptionStatus @default(ACTIVE)
  startDate        DateTime
  endDate          DateTime?
  nextBillingDate  DateTime
  lastPaymentDate  DateTime?
  paymentMethodRef String?
  autoRenew        Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  client           Client             @relation(fields: [clientId], references: [id])
  plan             MaintenancePlan    @relation(fields: [planId], references: [id])
  project          Project?           @relation(fields: [projectId], references: [id])
  projectId        String?
  payments         Payment[]

  @@map("maintenance_subscriptions")
}

model WebsiteContent {
  id        String   @id @default(cuid())
  page      String
  section   String
  content   Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([page, section])
  @@map("website_contents")
}

model DynamicPage {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dynamic_pages")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  isReplied Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id])
  adminId   String

  @@map("system_settings")
}

enum LeadStatus {
  PENDING
  OFFER_SENT
  ACCEPTED
  REJECTED
  CONVERTED
  ARCHIVED
  REVIEWING
  ASSIGNED_TO_PARTNER
  PENDING_OFFER_REVIEW
  OFFER_SENT_TO_CLIENT
  OFFER_REJECTED_BY_CLIENT
  ACCEPTED_AND_CONVERTED

}

enum ProjectStatus {
  PENDING_CLIENT_ACCEPTANCE
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
  REJECTED_BY_CLIENT
}

enum MilestoneStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  PAID
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAUSED
  TRIAL
}
