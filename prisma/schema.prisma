generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String      @id @default(cuid())
  email              String      @unique
  password           String
  name               String
  image              String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  createdPartners    Partner[]
  processedLeads     Lead[]      @relation("AdminProcessedLeads")
  approvedMilestones Milestone[]
  managedProjects    Project[]   @relation(name: "AdminCreatedProjects")

  @@map("admins")
}

model Partner {
  id                  String           @id @default(cuid())
  email               String           @unique
  password            String?
  name                String
  skillSet            String[]
  industryExp         String[]
  country             String?
  region              String?
  profilePhoto        String?
  hourlyRate          Decimal?
  portfolioLink       String?
  isActive            Boolean          @default(false)
  rating              Decimal?         @default(0)
  totalEarnings       Decimal          @default(0)
  availableBalance    Decimal          @default(0)
  verificationToken   String?          @unique
  verificationExpires DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  createdBy           Admin            @relation(fields: [createdById], references: [id])
  createdById         String
  assignedProjects    Project[]        @relation(name: "AssignedProjects")
  milestones          Milestone[]
  withdrawals         Withdrawal[]
  paymentDetails      PaymentDetails[]
  assignedLeads       Lead[]           @relation(name: "AssignedLeads")

  @@map("partners")
}

model Client {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String?
  phone               String?
  companyName         String?
  isActive            Boolean   @default(false)
  isEmailVerified     Boolean   @default(false)
  verificationToken   String?   @unique
  verificationExpires DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  leads        Lead[]
  projects     Project[]
  payments     Payment[]
  invoices     Invoice[]
  paymentCards PaymentCard[]

  maintenanceSubscription MaintenanceSubscription?

  @@map("clients")
}

model Lead {
  id              String     @id @default(cuid())
  name            String
  email           String
  phone           String
  companyName     String?
  projectCategory String
  projectTitle    String
  description     String
  keyFeatures     String[]
  budgetRange     String
  timeline        String?
  status          LeadStatus @default(PENDING)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relationships
  clientId          String?
  client            Client?  @relation(fields: [clientId], references: [id])
  assignedPartnerId String?
  assignedPartner   Partner? @relation(name: "AssignedLeads", fields: [assignedPartnerId], references: [id])
  processedById     String?
  processedBy       Admin?   @relation(name: "AdminProcessedLeads", fields: [processedById], references: [id])
  projectId         String?  @unique // This field is the foreign key in Lead
  project           Project? @relation("LeadToProject", fields: [projectId], references: [id]) // <--- Kept definition here, renamed relation

  // Offer details from Partner
  partnerProposedCost    Decimal?  @db.Decimal(10, 2)
  partnerNotes           String? // Notes from the partner on their offer
  partnerOfferProposedAt DateTime?
  adminOfferPreparedAt   DateTime?
  // New fields for offer details on the Lead
  offerPrice             Decimal?
  partnerCost            Decimal?
  adminMargin            Decimal?
  includesGST            Boolean?  @default(false)
  notes                  String?
  partnerOfferTime       Int       @default(0)
  clientOfferTime        Int       @default(0)

  @@map("leads")
}

model Project {
  id               String        @id @default(cuid())
  title            String
  description      String?
  projectCategory  String?
  budget           String?
  timeline         String?
  status           ProjectStatus @default(PENDING_CLIENT_ACCEPTANCE)
  offerPrice       Decimal
  partnerCost      Decimal
  adminMargin      Decimal
  includesGST      Boolean       @default(false)
  acceptedAt       DateTime?
  rejectedAt       DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  clientId         String
  client           Client        @relation(fields: [clientId], references: [id])
  partnerId        String
  partner          Partner       @relation(name: "AssignedProjects", fields: [partnerId], references: [id])
  leadId           String?       @unique // This field is the foreign key in Project
  lead             Lead?         @relation("LeadToProject") // <--- Removed fields/references here, added relation name
  createdByAdminId String?
  createdByAdmin   Admin?        @relation(name: "AdminCreatedProjects", fields: [createdByAdminId], references: [id])
  milestones       Milestone[]
  payments         Payment[]
  invoices         Invoice[]

  @@map("projects")
}

model Milestone {
  id          String          @id @default(cuid())
  title       String
  description String?
  cost        Decimal // Partner's proposed cost
  duration    Int // Partner's proposed timeline (e.g., days)
  status      MilestoneStatus @default(PENDING)
  order       Int // Order in the project's milestones

  // Fields set by Admin upon approval (ADD THESE IF THEY ARE MISSING):
  clientCost            Decimal? // ⭐ New: The cost client pays for this milestone
  estimatedTimeline     String? // ⭐ New: Admin's estimated timeline for the client (e.g., '2-4 weeks')
  additionalNotes       String? // ⭐ New: Admin's notes for this milestone
  includesGSTForInvoice Boolean? // ⭐ New: Whether GST was applied to THIS milestone's invoice (can differ from project default)

  dueDate     DateTime? // This can be set by admin if a hard due date is needed for partner
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project    Project @relation(fields: [projectId], references: [id])
  projectId  String
  partner    Partner @relation(fields: [partnerId], references: [id])
  partnerId  String
  approvedBy Admin?  @relation(fields: [adminId], references: [id])
  adminId    String? // Admin who approved/rejected it

  payments Payment[]
  invoices Invoice[]

  @@map("milestones")
}

model Payment {
  id                        String                   @id @default(cuid())
  amount                    Decimal
  gstAmount                 Decimal                  @default(0)
  totalAmount               Decimal
  method                    PaymentMethod
  status                    PaymentStatus            @default(PENDING)
  stripeId                  String?
  paypalId                  String?
  paidAt                    DateTime?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  client                    Client                   @relation(fields: [clientId], references: [id])
  clientId                  String
  project                   Project                  @relation(fields: [projectId], references: [id])
  projectId                 String
  milestone                 Milestone?               @relation(fields: [milestoneId], references: [id])
  milestoneId               String?
  invoice                   Invoice?                 @relation(fields: [invoiceId], references: [id])
  invoiceId                 String?
  maintenanceSubscription   MaintenanceSubscription? @relation(fields: [maintenanceSubscriptionId], references: [id])
  maintenanceSubscriptionId String?

  @@map("payments")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  amount        Decimal
  gstAmount     Decimal       @default(0)
  totalAmount   Decimal
  gstEnabled    Boolean       @default(false)
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  client        Client        @relation(fields: [clientId], references: [id])
  clientId      String
  project       Project       @relation(fields: [projectId], references: [id])
  projectId     String
  milestone     Milestone?    @relation(fields: [milestoneId], references: [id])
  milestoneId   String?
  payments      Payment[]

  @@map("invoices")
}

model GeneratedInvoice {
  id            String    @id @default(cuid())
  invoiceNumber String?
  amount        Decimal?  @db.Decimal(10, 2)
  gstAmount     Decimal?  @db.Decimal(10, 2)
  totalAmount   Decimal?  @db.Decimal(10, 2)
  gstEnabled    Boolean?
  status        String?
  dueDate       DateTime?

  client      Json?
  project     Json?
  milestone   Json?
  items       Json?
  companyInfo Json?
  createdAt   DateTime @default(now())

  @@map("generated_invoices")
}

model Withdrawal {
  id          String            @id @default(cuid())
  amount      Decimal           @db.Decimal(10, 2) // Ensure precision for financial values
  status      WithdrawalStatus  @default(PENDING)
  requestedAt DateTime          @default(now())
  processedAt DateTime?
  note        String?
  type        PaymentMethodType
  partner     Partner           @relation(fields: [partnerId], references: [id])
  partnerId   String

  @@map("withdrawals")
}

model PaymentCard {
  id         String @id @default(cuid())
  cardNumber String
  cardName   String
  expiryDate String
  cvv        String
  clientId   String // Foreign key to link to the Client
  client     Client @relation(fields: [clientId], references: [id])

  @@map("payment_card")
}

model SupportTicket {
  id          String   @id @default(cuid())
  subject     String
  description String
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  status      String   @default("OPEN") // OPEN, CLOSED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectName String?
  clientId    String
  projectId   String
  partnerId   String? // assigned partner for the project

  responses SupportResponse[]

  @@map("support_tickets")
}

model SupportResponse {
  id        String   @id @default(cuid())
  message   String
  userType  String // CLIENT or PARTNER
  createdAt DateTime @default(now())

  ticketId String
  ticket   SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("support_responses")
}

model Expense {
  id          Int      @id @default(autoincrement())
  category    String
  amount      Float
  date        DateTime
  description String
  createdAt   DateTime @default(now())

  @@map("expenses")
}

model Revenue {
  id        Int      @id @default(autoincrement())
  month     String // e.g., "Jan", "Feb"
  amount    Float
  createdAt DateTime @default(now())

  @@map("revenues")
}

model Summary {
  id           Int      @id @default(autoincrement())
  month        String
  totalRevenue Float
  gstCollected Float
  totalExpense Float
  netProfit    Float
  createdAt    DateTime @default(now())

  @@map("summarys")
}

model GstReport {
  id           Int      @id @default(autoincrement())
  period       String // e.g., "Q4 2023"
  gstCollected Float
  gstPaid      Float
  status       String // e.g., "Filed", "Pending"
  dueDate      DateTime
  createdAt    DateTime @default(now())

  @@map("gst_reports")
}

model MaintenanceSubscription {
  id                    String             @id @default(cuid())
  clientId              String             @unique // Required for one-to-one
  client                Client             @relation(fields: [clientId], references: [id])
  pricePerMonth         Float
  status                SubscriptionStatus @default(ACTIVE)
  gatewaySubscriptionId String?
  nextBillingDate       DateTime
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  payments Payment[]
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  isReplied Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

model Solution {
  id          String   @id @default(cuid())
  title       String   @unique
  description String
  image       String?
  features    String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("solutions")
}

model CaseStudy {
  id           String   @id @default(cuid())
  title        String   @unique
  client       String
  description  String
  image        String?
  challenge    String
  solution     String
  results      String
  technologies String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("case_studies")
}

model PaymentDetails {
  id          String   @id @default(cuid())
  bankName    String?
  accountName String?
  accountNo   String
  routingNo   String?
  paypalEmail String?
  partnerId   String
  partner     Partner  @relation(fields: [partnerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("payment_details")
}

// ENUM

enum LeadStatus {
  PENDING
  OFFER_SENT
  ACCEPTED
  REJECTED
  CONVERTED
  ARCHIVED
  REVIEWING
  ASSIGNED_TO_PARTNER
  PENDING_OFFER_REVIEW
  OFFER_SENT_TO_CLIENT
  OFFER_REJECTED_BY_CLIENT
  ACCEPTED_AND_CONVERTED
  PARTNER_OFFER_PROPOSED
  OFFER_ACCEPTED_BY_CLIENT
}

enum ProjectStatus {
  PENDING_CLIENT_ACCEPTANCE
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
  REJECTED_BY_CLIENT
}

enum MilestoneStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  PAID
  OVERDUE
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  COMPLETED
  CANCELED
  PAID
  REJECTED
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  EXPIRED
}

enum PaymentMethodType {
  CREDIT_CARD
  PAYPAL
  BANK_ACCOUNT
}
